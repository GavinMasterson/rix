% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_rev.R
\name{rix}
\alias{rix}
\title{rix Build a reproducible development environment definition}
\usage{
rix(
  r_ver = "current",
  r_pkgs,
  other_pkgs = NULL,
  git_pkgs = NULL,
  ide = "other",
  path = ".",
  overwrite = FALSE
)
}
\arguments{
\item{r_ver}{Character, defaults to "current". The required R version. To use the current version
of R, use "current". You can check which R versions are available using \code{available_r}.}

\item{r_pkgs}{Vector of characters. List the required R packages for your
analysis here.}

\item{other_pkgs}{Vector of characters. List further software you wish to install that}

\item{git_pkgs}{List. A list of packages to install from Git. See details for more information.
are not R packages.}

\item{ide}{Character, defaults to "other". If you wish to use RStudio to work
interactively use "rstudio", "code" for Visual Studio Code. For other editors,
use "other". This has been tested with RStudio, VS Code and Emacs. If other
editors don't work, please open an issue.}

\item{path}{Character, defaults to the current working directory. Where to write
\code{default.nix}, for example "/home/path/to/project".
The file will thus be written to "/home/path/to/project/default.nix".}

\item{overwrite}{Logical, defaults to FALSE. If TRUE, overwrite the \code{default.nix}
file in the specified path.}
}
\value{
Nothing, this function only has the side-effect of writing a file
called "default.nix" in the working directory. This file contains the
instructions to build a reproducible environment using the Nix package
manager.
}
\description{
rix Build a reproducible development environment definition
}
\details{
This function will write a \code{default.nix} in the chosen path. Using
the Nix package manager, it is then possible to build a reproducible
development environment using the \code{nix-build} command in the path. This
environment will contain the chosen version of R and packages, and will not
interfere with any other installed version (via Nix or not) on your
machine. Every dependency, including both R package dependencies but also
system dependencies like compilers will get installed as well in that
environment. If you use RStudio for interactive work, then set the
\code{rstudio} parameter to \code{TRUE}. If you use another IDE (for example Emacs or
Visual Studio Code), you do not need to add it to the \code{default.nix} file,
you can simply use the version that is installed on your computer. To use
Visual Studio Code however, you need to install the \code{{languageserver}}
package, so don't forget to add it to the list of packages. Once you built
the environment using \code{nix-build}, you can drop into an interactive session
using \code{nix-shell}. See the "How-to Nix" vignette for detailled instructions.
Packages to install from Github must be provided in a list of 4 elements:
"package_name", "repo_url", "branch_name" and "commit". A fifth, optional
element, "sri_hash" can be provided as well. This argument can also be a list
of lists of these 4 elements.
See the "Installing packages from Github" for detailled instructions.
}
